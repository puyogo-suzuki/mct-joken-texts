@import: ../../../mystdjareport
@require: code
@require: itemize
@require: tabular
@require: proof
@import: ../../local

document (|
    title = {テキストエディタを作ろう\fil-both;（実装編：C）};
    class-name = {情報科学研究部用テキスト};
    author = {Go Suzuki};
    show-title = true;
    show-toc = true;
|) '<
    +non-chapter{ライセンス}<
        +p{
            この文書はCC-BYである．また，この文書により生じる一切の請求、損害、その他の義務について何らの責任も負わない．
        }
    >
    +chapter{ファイルを読み書きしよう \box-text(RGB (0.0, 0.4, 0.0)){楽}}<
        +p{
            では，ラインエディタと呼ばれるものを最初に作ってみよう．ラインエディタはedが有名である．
        }
        +section{作るモノ}<
            +code(```
$ ./a.out hoge.txt
> p0,3
hoge
piyo
fuga
funya
> a1
puru
pura
.
> p0,5
hoge
piyo
puru
pura
fuga
funya
> r4,100000
> p0,1000
hoge
piyo
puru
> q（プログラム終了）
            ```);
            +p{
                作るラインエディタは，引数に読み書きするファイル名を指定する．
                \gray{`>`}を表示してコマンドを待機する．コマンドは次の通りである．
            }
            +enumerate{
                * q : プログラムを終了する
                * w : 変更を保存する（ファイルに書き出す）
                * p : 指定された範囲の行を表示する
                * r : 指定された範囲の行を削除する
                * a : 指定された行の後に入力された行を追加する（\gray{`.`}で入力終了．）
            }
            +p{
                範囲指定は，\gray{`<start>,<end>`}という書式で行う．
                \gray{`<start>`}以上\gray{`<end>`}未満であることを表す．
                \gray{`<start>`}とだけ渡された場合は，\gray{`<start>`}以上\gray{`<start> + 1`}未満であると解釈する．
            }
        >
        +section{可変長配列}<
            +p{
                テキストファイルのデータを保存するために，可変長配列を用意しよう．そのため，次の構造体を用意しよう．
            }
            +code(```
struct buffer {
    char * buf;  // buffer
    int len; // length
    int cap; // capacity
};
```);  
            +p{
                \gray{`buf`}はバッファへのポインタ，\gray{`cap`}は確保したバッファのサイズ，\gray{`len`}は実際の文字列のサイズである．
            }
            +p{
                そして，次の関数を用意してみよう．
            }
            +code(```
int newString(char * content, int size, struct buffer * result)
    // contentの内容でsize分だけのバッファを確保し，resultに格納する．返り値は成功したか．
int insertString(struct buffer * me, char * content, int start, int size)
    // meにcontent(長さはsize)をstartの位置から挿入する．返り値は成功したか．
void removeString(struct buffer * me, int start, int size)
    // meをstartの位置からsize分だけ削除する，
```);  
            +p{
                実装する際は絵を描いて考えてみよう．
            }
            +subsection{\box-text(RGB (0.0, 0.4, 0.0)){易}\gray{`newString`}のヒント}<
                +listing {
                    * \gray{malloc}を用いてバッファを確保し，\gray{memcpy}で内容をコピーしよう．
                }
            >
            +subsection{\box-text(RGB (1.0, 0.0, 0.0)){難}\gray{`insertString`}のヒント}<
                +listing {
                    * \gray{`me->cap < (me->len + size)`}のときは，バッファを確保しなおそう．
                    * まず，\gray{`start`}の位置から最後までの文字を\gray{`size`}だけ後に動かそう．
                    * 動かしたら，\gray{`start`}の位置に\gray{`content`}を書き込もう．
                }
            >
            +subsection{\box-text(RGB (0.0, 0.4, 0.0)){易}\gray{`removeString`}のヒント} <
                +listing{
                    * \gray{`start+size`}から最後までの文字を\gray{`size`}だけ前に動かさなきゃいけない．
                }
            >
        >
        +section{読み書きする関数を用意しよう}<
            +p{
                まずはファイルを読み書きする関数を用意してみよう．
            }
            +code(```
int openFile(struct buffer * buf, char * path)
    // ファイル読み込みする．内容はbufに格納される．返り値は成功したか
int writeFile(struct buffer * buf, char * path)
    // ファイル書き込みする．返り値は成功したか
```);  
            +p{
                ファイル読み込みは\gray{`fopen`}を\gray{`r`}モードで開く．戻り値チェックなどは忘れずに行おう．（\gray{`openFile`}関数）
                そして，読み込んで，作った可変長配列に格納してみよう．
            }
            +subsection{\box-text(RGB (0.0, 0.4, 0.0)){易}\gray{`openFile`}のヒント} <
                +listing{
                    * \gray{`newString`}して可変長配列を作ろう．
                    * \gray{`gets`}と\gray{`insertString`}でどんどん読み込んでいこう．
                }
            >
            +subsection{\box-text(RGB (0.0, 0.4, 0.0)){易}\gray{`writeFile`}のヒント} <
                +listing{
                    * \gray{`fwrite`}で一気にやろう．
                }
            >
        >
        +section{各処理を作っていこう}<
            +p{
                各コマンドに対応する処理を作っていこう．
            }
            +code(```
// 全てstartは始まりの行，endは終わりの行です！
void printLines(struct buffer * buf, int start, int end)
    // 内容を表示する．
int appendLines(struct buffer * buf, int start, int end)
    // 追加する．endは無視しよう．返り値は成功したか
void removeLines(struct buffer * buf, int start, int end)
    // 削除する．
```);  
            +subsection{\box-text(RGB (0.0, 0.4, 0.0)){易}\gray{`printLines`}のヒント} <
                +listing{
                    * \gray{`for`}ループと\gray{`putc`}で1文字ずつ処理していこう．
                    * \gray{`\n`}が来たら，次の行に移った合図だ．
                }
            >
            +subsection{\box-text(RGB (1.0, 0.0, 0.0)){難}\gray{`appendLines`}のヒント}<
                +listing {
                    * \gray{`printLines`}と同様に行をカウントしていこう．
                    * 挿入は\gray{`insertString`}を使おう．
                    * とりあえず1行あたり1024文字まで入力できる，と仮定しておこう．（可変長はコンソールAPIを使わなきゃいけない）
                }
            >
            +subsection{\box-text(RGB (0.0, 0.4, 0.0)){易}\gray{`removeLines`}のヒント} <
                +listing{
                    * \gray{`printLines`}と同様に行をカウントしていこう．
                }
            >
        >
        +section{コマンドを解析しよう}<
            +p{
                コマンドの範囲選択のところを解析する関数を作ろう．
            }
            +code(```
int parse(char * buf, int * start, int * end) // 返り値は成功したか
```);
            +subsection{\box-text(RGB (1.0, 0.0, 0.0)){難}ヒント} <
                +listing{
                    * まず，どこからどこまでが数字かを判断して，しっかりとカンマがあるか，あるいは改行が来て終わるか判別しよう．
                    * 書式が正しいことを確認したら\gray{`sscanf`}を用いて，数を読み取ろう．
                    * 改行ならば終わり，カンマがあるならば，次の数のところからまた\gray{`sscanf`}を用いよう．
                }
            >
        >
        +section{mainを用意しよう}<
            +p{
                ここまでできた君ならば行けるはず！
            }
        >
        +section{メモリマップトファイルを用いてファイル読み込みをしてみよう}<
            +subsection{仮想メモリ}<
                +p{
                    我々が使っているポインタは，アドレスを示すが，そのアドレスは主記憶装置上の物理的な位置を直接指し示すものではない．
                    直接指し示すアドレスのことを\dfn{物理アドレス}, \dfn{physical address}と呼び，
                    我々が普段触っているアドレスを\dfn{論理アドレス}, \dfn{仮想アドレス}, \dfn{virtual address}と呼ぶ．
                    CPUには\dfn{メモリ管理ユニット}, \dfn{Memory Management Unit, MMU}があって，
                    私たちがポインタを\dfn{デリファレンス}, \dfn{dereference}（\gray{`int * a; *a = 0;`}とすること）
                    すると，それが高速に仮想アドレスから物理アドレスに変換してくれる．
                    そして，そのメモリ管理ユニットを管理してくれるのがOSである．
                    また，この仕組みのことを\dfn{仮想メモリ}, \dfn{virtual memory}と呼ぶ．
                }
                +p{
                    メモリ管理ユニットのおかげで，あるプログラムのメモリ上のデータを他のプログラムから改竄されることを防いだり，
                    メモリの断片化が起こったときに領域を移動させることで解決したり，
                    プロセスがたくさんメモリを欲しがったときにすぐに新しい領域を確保したり，
                    メモリがいっぱいになったときに，データをディスクに退避させる，といったことができるようになる．
                }
            >
            +subsection{メモリマップトファイル}<
                +p{
                    メモリ管理ユニットは参照先が見つからないときに，OSに助けを求める．
                    そのときに，ファイルの内容をメモリに読み込んで，読み込んだ場所を指すようにする．
                    すると，メモリ管理の仕組みによってファイルの読み書きができるようになる！
                    この仕組みやこの仕組みによって読み書きされるファイルのことを\dfn{メモリマップトファイル}, \dfn{memory mapped file}と呼ぶ．
                    システムコールは何回も呼び出すと遅くなるのに対し，この方法であれば高速に大容量のファイルを読み書きすることができる．
                }
            >
            +subsection{メモリマップトファイルと普通の読み書きを比較してみよう}<
                +p{
                    ソースコードをそれぞれ示す．
                }
                +display-boxes('<
                    +p{ライブラリの読み書き}
                >)(```
#include <stdio.h>

int main(void) {
    char buf[16];
    FILE * fp = fopen("hoge.c", "r");
    for(int i = 0; i < 10000; ++i) {
        fseek(fp, 0L, SEEK_SET);
        while(fread(buf, sizeof(char), 16, fp) != 0);
    }
    fclose(fp);
    return buf[0];
}
                ```);
                +display-boxes('<
                    +p{\gray{`read`}}
                >)(```
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
int main(void) {
    char buf[16];
    int fp = open("hoge.c", O_RDONLY);
    for(int i = 0; i < 10000; ++i) {
        lseek(fp, 0L, SEEK_SET);
        while(read(fp, buf, sizeof(buf)) != 0);
    }
    close(fp);
    return buf[0];
}
```);
                +display-boxes('<
                    +p{メモリマップトファイル}
                >)(```
#include <stdio.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <string.h>
#include <unistd.h>
#include <sys/stat.h>
int main(void) {
    int fd;
    char *map;

    struct stat statBuf;

    if (stat("hoge.c", &statBuf) != 0) {
        printf("Error : can't stat¥n");
        return 1;
    }

    fd = open("hoge.c", O_RDONLY);
    if(fd < 0) {
        printf("Error : can't open file\n");
        return -1;
    }
    map = (char*)mmap(NULL, statBuf.st_size, PROT_READ, MAP_SHARED, fd, 0);
    if(map == MAP_FAILED) {
        printf("Error : mmap failed\n");
        return -1;
    }

    char buf[16];
    int iterate = 0;
    for(int i = 0; i < 10000; ++i)
        for(iterate = 0; iterate < statBuf.st_size; iterate += 16) 
            memcpy(buf, (map + iterate),
            statBuf.st_size <= (iterate + 16) ? (statBuf.st_size - iterate) : 16);
    close(fd);
    munmap(map, statBuf.st_size);
    return 0;
}
                ```);
                +p{
                    実行結果は次のようになった．
                }
                +display-boxes('<
                    +p{ライブラリの読み書きの速度}
                >)(```
$ time ./a.out 

real    0m0.035s
user    0m0.013s
sys     0m0.022s
```);
                +display-boxes('<
                    +p{\gray{`read`}の読み書きの速度}
                >)(```
$ time ./a.out 

real    0m0.162s
user    0m0.029s
sys     0m0.133s
```);
                
                +display-boxes('<
                    +p{メモリマップトファイルの速度}
                >)(```
$ time ./a.out 

real    0m0.004s
user    0m0.003s
sys     0m0.001s
```);
                +p {
                    速い！特に，\gray{`sys`}（カーネルが消費した時間）が大きく違う．
                }
                +p {
                    だが，注意としては，闇雲にページを作るとOSの処理が遅くなること（たくさんページテーブルエントリができてしまう．）が挙げられる．
                    大きいファイルで，何回も読み込まれる可能性のあるもののみメモリマップトファイルを用いるようにしよう．
                }
            >
        >
    >
>